using System;
using System.Collections.Generic;
using System.Configuration;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Text;
using System.Threading.Tasks;
using Authorization_Common.Models;
using Authorization_Common.Models.DTO;
using Authorization_Dal;

namespace Authorization_Bl.Managers
{
    public class AuthManager
    {
        DynamoDbRepository<UserAuth> _authRepository;
        DynamoDbRepository<UserFacebook> _oAuthRepository;
        public AuthManager()
        {
            _authRepository = new DynamoDbRepository<UserAuth>();
            _oAuthRepository = new DynamoDbRepository<UserFacebook>();
        }

        public UserAuth Register(RegisterDTO model)
        {
            var guid = Guid.NewGuid().ToString();
            return _authRepository.Add(new UserAuth() { Username = model.Username, Password = model.Password, UserId = guid });
        }

        public UserAuth Login(LoginDTO model)
        {
            var user = _authRepository.Get(model.Username);
            if (user == null && user.Password != model.Password)
            {
                return null;
            }
            return user;
        }

        public UserFacebook LoginFacebook(FacebookLoginDTO model)
        {
            var existingUser = _oAuthRepository.Get(model.FacebookId);
            if (existingUser != null)
            {
                return existingUser;
            }
            else
            {
                var guid = Guid.NewGuid().ToString();
                return _oAuthRepository.Add(new UserFacebook() { FacebookId = model.FacebookId, Username = model.Username, UserId = guid });
            }
        }

        /// <summary>
        /// create new user in user table on dynamoDB
        /// </summary>
        /// <param name="userId">userId generated by auth service when user register or login by facebook </param>
        /// <param name="email">email provide by client</param>
        /// <param name="token">JWT</param>
        public User AddUserToDb(string userId, string email, string token)
        {
            string url = ConfigurationManager.AppSettings["IdentityServiceUrl"];
            User user = new User() { UserId = userId, Email = email };
            using (var http = new HttpClient())
            {
                http.DefaultRequestHeaders.Add("x-auth-token", token);
                var response = http.PostAsJsonAsync(url, user).Result;
                return response.Content.ReadAsAsync<User>().Result;
            }
        }

    }
}
