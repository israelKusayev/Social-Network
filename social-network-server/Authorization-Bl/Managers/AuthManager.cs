using System;
using System.Configuration;
using System.Net.Http;
using Authorization_Common.Interfaces.Managers;
using Authorization_Common.Interfaces.Repositories;
using Authorization_Common.Models;
using Authorization_Common.Models.DTO;

namespace Authorization_Bl.Managers
{
    public class AuthManager : IAuthManager
    {
        IDynamoDbRepository<UserAuth> _authRepository;
        IDynamoDbRepository<UserFacebook> _oAuthRepository;
        public AuthManager(IDynamoDbRepository<UserAuth> authRepository,
            IDynamoDbRepository<UserFacebook> oAuthRepository)
        {
            _authRepository = authRepository;
            _oAuthRepository = oAuthRepository;
        }

        public UserAuth Register(RegisterDTO model)
        {
            var guid = Guid.NewGuid().ToString();
            return _authRepository.Add(new UserAuth() { Username = model.Username, Password = model.Password, UserId = guid });
        }

        public UserAuth Login(LoginDTO model)
        {
            var user = _authRepository.Get(model.Username);
            if (user == null || user.Password != model.Password)
            {
                return null;
            }
            return user;
        }

        public UserFacebook LoginFacebook(FacebookLoginDTO model)
        {
            var existingUser = _oAuthRepository.Get(model.FacebookId);
            if (existingUser != null)
            {
                return existingUser;
            }
            else
            {
                var guid = Guid.NewGuid().ToString();
                return _oAuthRepository.Add(new UserFacebook() { FacebookId = model.FacebookId, Username = model.Username, UserId = guid });
            }
        }

        /// <summary>
        /// create new user in user table on dynamoDB
        /// </summary>
        /// <param name="userId">userId generated by auth service when user register or login by facebook </param>
        /// <param name="email">email provide by client</param>
        /// <param name="token">JWT</param>
        public string AddUserToDb(string userId, string email, string token)
        {
            string url = ConfigurationManager.AppSettings["IdentityServiceUrl"];
            url += "/UsersIdentity";
            User user = new User() { UserId = userId, Email = email };
            using (var http = new HttpClient())
            {
                http.DefaultRequestHeaders.Add("x-auth-token", token);
                var response = http.PostAsJsonAsync(url, user).Result;
                return response.Content.ReadAsStringAsync().Result;
            }
        }

        public bool ResetPassword(ResetPasswordDTO model)
        {
            var user = _authRepository.Get(model.Username);
            if (user == null) return false;
            user.Password = model.NewPassword;
            _authRepository.Update(user);
            return true;
        }
    }
}
